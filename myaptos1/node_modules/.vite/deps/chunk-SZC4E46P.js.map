{
  "version": 3,
  "sources": ["../../@thalalabs/surf/src/core/createEntryPayload.ts"],
  "sourcesContent": ["import type {\n  ABIRoot,\n  EntryPayload,\n  EntryRequestPayload,\n} from '../types/index.js';\nimport { EntryFunctionName } from '../types/extractor/functionExtractor.js';\n\n/**\n * Create a payload for calling a entry function.\n *\n * @param abi The ABI JSON contains the entry function. For type inference and encoding/decoding purpose.\n * @param payload.function The function name.\n * @param payload.arguments The input arguments for function.\n * @param payload.type_arguments The generic type arguments for function.\n * @returns The payload object to be used in `simulateTransaction` or `submitTransaction` method.\n * @example\n * const payload = createEntryPayload(COIN_ABI, {\n *   function: 'transfer',\n *   functionArguments: ['0x1', 1],\n *   typeArguments: ['0x1::aptos_coin::AptosCoin'],\n * });\n *\n * const result = await client.submitTransaction({\n *   payload,\n *   signer: account,\n * });\n */\nexport function createEntryPayload<\n  T extends ABIRoot,\n  TFuncName extends EntryFunctionName<T>,\n>(abi: T, payload: EntryRequestPayload<T, TFuncName>): EntryPayload {\n  const fnAbi = abi.exposed_functions.filter(\n    (f) => f.name === payload.function,\n  )[0];\n\n  if (fnAbi === undefined)\n    throw new Error(`Function ${payload.function} not found in ABI`);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const typeArguments: string[] = payload.typeArguments as any[];\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const valArguments: any[] = payload.functionArguments as any[];\n  const abiArgs =\n    fnAbi.params[0] === '&signer'\n      ? (fnAbi.params as string[]).slice(1)\n      : (fnAbi.params as string[]);\n\n  // Validations\n  if (fnAbi === undefined)\n    throw new Error(`Function ${payload.function} not found in ABI`);\n  if (abiArgs.length !== valArguments.length)\n    throw new Error(\n      `Function ${payload.function} expects ${fnAbi.params.length} arguments, but ${payload.functionArguments.length} were provided`,\n    );\n  if (fnAbi.generic_type_params.length !== typeArguments.length)\n    throw new Error(\n      `Function ${payload.function} expects ${fnAbi.generic_type_params.length} type arguments, but ${payload.typeArguments.length} were provided`,\n    );\n\n  return {\n    typeArguments: payload.typeArguments,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    functionArguments: payload.functionArguments as any,\n    function: `${payload.address ?? abi.address}::${abi.name}::${payload.function}`,\n  };\n}\n"],
  "mappings": ";AA2BM,SAAU,mBAGd,KAAQ,SAA0C;AAClD,QAAM,QAAQ,IAAI,kBAAkB,OAClC,CAAC,MAAM,EAAE,SAAS,QAAQ,QAAQ,EAClC,CAAC;AAEH,MAAI,UAAU;AACZ,UAAM,IAAI,MAAM,YAAY,QAAQ,QAAQ,mBAAmB;AAGjE,QAAM,gBAA0B,QAAQ;AAGxC,QAAM,eAAsB,QAAQ;AACpC,QAAM,UACJ,MAAM,OAAO,CAAC,MAAM,YACf,MAAM,OAAoB,MAAM,CAAC,IACjC,MAAM;AAGb,MAAI,UAAU;AACZ,UAAM,IAAI,MAAM,YAAY,QAAQ,QAAQ,mBAAmB;AACjE,MAAI,QAAQ,WAAW,aAAa;AAClC,UAAM,IAAI,MACR,YAAY,QAAQ,QAAQ,YAAY,MAAM,OAAO,MAAM,mBAAmB,QAAQ,kBAAkB,MAAM,gBAAgB;AAElI,MAAI,MAAM,oBAAoB,WAAW,cAAc;AACrD,UAAM,IAAI,MACR,YAAY,QAAQ,QAAQ,YAAY,MAAM,oBAAoB,MAAM,wBAAwB,QAAQ,cAAc,MAAM,gBAAgB;AAGhJ,SAAO;IACL,eAAe,QAAQ;IAEvB,mBAAmB,QAAQ;IAC3B,UAAU,GAAG,QAAQ,WAAW,IAAI,OAAO,KAAK,IAAI,IAAI,KAAK,QAAQ,QAAQ;;AAEjF;",
  "names": []
}
